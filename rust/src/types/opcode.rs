use common::opcode::*;

#[allow(dead_code)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
#[repr(u8)]
pub enum Opcode {
    Stop = STOP,
    Add = ADD,
    Mul = MUL,
    Sub = SUB,
    Div = DIV,
    SDiv = SDIV,
    Mod = MOD,
    SMod = SMOD,
    AddMod = ADDMOD,
    MulMod = MULMOD,
    Exp = EXP,
    SignExtend = SIGNEXTEND,
    Lt = LT,
    Gt = GT,
    SLt = SLT,
    SGt = SGT,
    Eq = EQ,
    IsZero = ISZERO,
    And = AND,
    Or = OR,
    Xor = XOR,
    Not = NOT,
    Byte = BYTE,
    Shl = SHL,
    Shr = SHR,
    Sar = SAR,
    Sha3 = SHA3,
    #[cfg(feature = "needs-fn-ptr-conversion")]
    NoOp = SHA3 + 1,
    #[cfg(feature = "needs-fn-ptr-conversion")]
    SkipNoOps = SHA3 + 2,
    Address = ADDRESS,
    Balance = BALANCE,
    Origin = ORIGIN,
    Caller = CALLER,
    CallValue = CALLVALUE,
    CallDataLoad = CALLDATALOAD,
    CallDataSize = CALLDATASIZE,
    CallDataCopy = CALLDATACOPY,
    CodeSize = CODESIZE,
    CodeCopy = CODECOPY,
    GasPrice = GASPRICE,
    ExtCodeSize = EXTCODESIZE,
    ExtCodeCopy = EXTCODECOPY,
    ReturnDataSize = RETURNDATASIZE,
    ReturnDataCopy = RETURNDATACOPY,
    ExtCodeHash = EXTCODEHASH,
    BlockHash = BLOCKHASH,
    Coinbase = COINBASE,
    Timestamp = TIMESTAMP,
    Number = NUMBER,
    PrevRandao = PREVRANDAO,
    GasLimit = GASLIMIT,
    ChainId = CHAINID,
    SelfBalance = SELFBALANCE,
    BaseFee = BASEFEE,
    BlobHash = BLOBHASH,
    BlobBaseFee = BLOBBASEFEE,
    Pop = POP,
    MLoad = MLOAD,
    MStore = MSTORE,
    MStore8 = MSTORE8,
    SLoad = SLOAD,
    SStore = SSTORE,
    Jump = JUMP,
    JumpI = JUMPI,
    Pc = PC,
    MSize = MSIZE,
    Gas = GAS,
    JumpDest = JUMPDEST,
    TLoad = TLOAD,
    TStore = TSTORE,
    MCopy = MCOPY,
    Push0 = PUSH0,
    Push1 = PUSH1,
    Push2 = PUSH2,
    Push3 = PUSH3,
    Push4 = PUSH4,
    Push5 = PUSH5,
    Push6 = PUSH6,
    Push7 = PUSH7,
    Push8 = PUSH8,
    Push9 = PUSH9,
    Push10 = PUSH10,
    Push11 = PUSH11,
    Push12 = PUSH12,
    Push13 = PUSH13,
    Push14 = PUSH14,
    Push15 = PUSH15,
    Push16 = PUSH16,
    Push17 = PUSH17,
    Push18 = PUSH18,
    Push19 = PUSH19,
    Push20 = PUSH20,
    Push21 = PUSH21,
    Push22 = PUSH22,
    Push23 = PUSH23,
    Push24 = PUSH24,
    Push25 = PUSH25,
    Push26 = PUSH26,
    Push27 = PUSH27,
    Push28 = PUSH28,
    Push29 = PUSH29,
    Push30 = PUSH30,
    Push31 = PUSH31,
    Push32 = PUSH32,
    Dup1 = DUP1,
    Dup2 = DUP2,
    Dup3 = DUP3,
    Dup4 = DUP4,
    Dup5 = DUP5,
    Dup6 = DUP6,
    Dup7 = DUP7,
    Dup8 = DUP8,
    Dup9 = DUP9,
    Dup10 = DUP10,
    Dup11 = DUP11,
    Dup12 = DUP12,
    Dup13 = DUP13,
    Dup14 = DUP14,
    Dup15 = DUP15,
    Dup16 = DUP16,
    Swap1 = SWAP1,
    Swap2 = SWAP2,
    Swap3 = SWAP3,
    Swap4 = SWAP4,
    Swap5 = SWAP5,
    Swap6 = SWAP6,
    Swap7 = SWAP7,
    Swap8 = SWAP8,
    Swap9 = SWAP9,
    Swap10 = SWAP10,
    Swap11 = SWAP11,
    Swap12 = SWAP12,
    Swap13 = SWAP13,
    Swap14 = SWAP14,
    Swap15 = SWAP15,
    Swap16 = SWAP16,
    Log0 = LOG0,
    Log1 = LOG1,
    Log2 = LOG2,
    Log3 = LOG3,
    Log4 = LOG4,
    Create = CREATE,
    Call = CALL,
    CallCode = CALLCODE,
    Return = RETURN,
    DelegateCall = DELEGATECALL,
    Create2 = CREATE2,
    StaticCall = STATICCALL,
    Revert = REVERT,
    Invalid = INVALID,
    SelfDestruct = SELFDESTRUCT,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum CodeByteType {
    JumpDest,
    #[cfg(feature = "needs-fn-ptr-conversion")]
    Push,
    Opcode,
    DataOrInvalid,
}

pub fn code_byte_type(code_byte: u8) -> (CodeByteType, usize) {
    match code_byte {
        STOP | ADD | MUL | SUB | DIV | SDIV | MOD | SMOD | ADDMOD | MULMOD | EXP | SIGNEXTEND
        | LT | GT | SLT | SGT | EQ | ISZERO | AND | OR | XOR | NOT | BYTE | SHL | SHR | SAR
        | SHA3 | ADDRESS | BALANCE | ORIGIN | CALLER | CALLVALUE | CALLDATALOAD | CALLDATASIZE
        | CALLDATACOPY | CODESIZE | CODECOPY | GASPRICE | EXTCODESIZE | EXTCODECOPY
        | RETURNDATASIZE | RETURNDATACOPY | EXTCODEHASH | BLOCKHASH | COINBASE | TIMESTAMP
        | NUMBER | PREVRANDAO | GASLIMIT | CHAINID | SELFBALANCE | BASEFEE | BLOBHASH
        | BLOBBASEFEE | POP | MLOAD | MSTORE | MSTORE8 | SLOAD | SSTORE | JUMP | JUMPI | PC
        | MSIZE | GAS | TLOAD | TSTORE | MCOPY | PUSH0 | DUP1 | DUP2 | DUP3 | DUP4 | DUP5
        | DUP6 | DUP7 | DUP8 | DUP9 | DUP10 | DUP11 | DUP12 | DUP13 | DUP14 | DUP15 | DUP16
        | SWAP1 | SWAP2 | SWAP3 | SWAP4 | SWAP5 | SWAP6 | SWAP7 | SWAP8 | SWAP9 | SWAP10
        | SWAP11 | SWAP12 | SWAP13 | SWAP14 | SWAP15 | SWAP16 | LOG0 | LOG1 | LOG2 | LOG3
        | LOG4 | CREATE | CALL | CALLCODE | RETURN | DELEGATECALL | CREATE2 | STATICCALL
        | REVERT | INVALID | SELFDESTRUCT => (CodeByteType::Opcode, 0),
        PUSH1..=PUSH32 => (
            #[cfg(not(feature = "needs-fn-ptr-conversion"))]
            CodeByteType::Opcode,
            #[cfg(feature = "needs-fn-ptr-conversion")]
            CodeByteType::Push,
            (code_byte - Opcode::Push1 as u8 + 1) as usize,
        ),
        JUMPDEST => (CodeByteType::JumpDest, 0),
        _ => (CodeByteType::DataOrInvalid, 0),
    }
}
