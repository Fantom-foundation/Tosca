[workspace]
members = ["driver", "benchmarks"]

[package]
name = "evmrs"
version = "0.1.0"
edition = "2021"

[profile.profiling]
inherits = "release"
debug = true

[features]
# Flag mock enables code generation for test mocking. This allows generating mocks for other build configuration but "test". 
mock = ["dep:mockall"]
dump-cov = []
# optimizations:
performance = [
    "mimalloc",
    "stack-array",
    "custom-evmc",
    "jumptable",
    "hash-cache",
    "jump-cache",
]
mimalloc = ["dep:mimalloc"]
stack-array = []
custom-evmc = ["dep:evmc-vm-tosca-refactor"]
jumptable = []
hash-cache = ["dep:lru"]
jump-cache = ["dep:lru", "dep:nohash-hasher"]
thread-local-cache = []

[dependencies]
bnum = "0.12.0"
evmc-vm-tosca = { package = "evmc-vm", git = "https://github.com/Fantom-foundation/evmc", branch = "tosca-extensions" }
evmc-vm-tosca-refactor = { package = "evmc-vm", git = "https://github.com/LorenzSchueler/evmc", branch = "tosca-extensions-execution-message-slice-output-box", optional = true }
sha3 = "0.10.8"
mockall = { version = "0.13.0", optional = true }
mimalloc = { version = "0.1.43", optional = true }
lru = { version = "0.12.5", optional = true }
nohash-hasher = { version = "0.2.0", optional = true }

[dev-dependencies]
# workaround for enabling mock feature also in integration tests
evmrs = { path = ".", features = ["mock"] }
driver = { path = "driver", features = ["mock"] }

[lib]
crate-type = ["cdylib", "rlib"]

[lints.rust]
macro_use_extern_crate = "warn"
unused_crate_dependencies = "warn"
unused_unsafe = "warn"

[lints.clippy]
cloned_instead_of_copied = "warn"
collection_is_never_read = "warn"
copy_iterator = "warn"
default_trait_access = "warn"
filter_map_next = "warn"
format_push_string = "warn"
implicit_clone = "warn"
inconsistent_struct_constructor = "warn"
inefficient_to_string = "warn"
items_after_statements = "warn"
large_types_passed_by_value = "warn"
macro_use_imports = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
match_same_arms = "warn"
multiple_inherent_impl = "warn"
multiple_unsafe_ops_per_block = "warn"
needless_collect = "warn"
needless_for_each = "warn"
needless_pass_by_value = "warn"
redundant_closure_for_method_calls = "warn"
ref_patterns = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
trivially_copy_pass_by_ref = "warn"
undocumented_unsafe_blocks = "warn"
uninlined_format_args = "warn"
unnested_or_patterns = "warn"
unused_self = "warn"
