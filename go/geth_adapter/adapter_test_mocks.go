// Copyright (c) 2024 Fantom Foundation
//
// Use of this software is governed by the Business Source License included
// in the LICENSE file and at fantom.foundation/bsl11.
//
// Change Date: 2028-4-16
//
// On the date above, in accordance with the Business Source License, use of
// this software will be governed by the GNU Lesser General Public License v3.

// Code generated by MockGen. DO NOT EDIT.
// Source: adapter_test.go
//
// Generated by this command:
//
//	mockgen -source adapter_test.go -destination adapter_test_mocks.go -package geth_adapter
//

// Package geth_adapter is a generated GoMock package.
package geth_adapter

import (
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	stateless "github.com/ethereum/go-ethereum/core/stateless"
	tracing "github.com/ethereum/go-ethereum/core/tracing"
	types "github.com/ethereum/go-ethereum/core/types"
	params "github.com/ethereum/go-ethereum/params"
	utils "github.com/ethereum/go-ethereum/trie/utils"
	uint256 "github.com/holiman/uint256"
	gomock "go.uber.org/mock/gomock"
)

// MockStateDb is a mock of StateDb interface.
type MockStateDb struct {
	ctrl     *gomock.Controller
	recorder *MockStateDbMockRecorder
}

// MockStateDbMockRecorder is the mock recorder for MockStateDb.
type MockStateDbMockRecorder struct {
	mock *MockStateDb
}

// NewMockStateDb creates a new mock instance.
func NewMockStateDb(ctrl *gomock.Controller) *MockStateDb {
	mock := &MockStateDb{ctrl: ctrl}
	mock.recorder = &MockStateDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateDb) EXPECT() *MockStateDbMockRecorder {
	return m.recorder
}

// AddAddressToAccessList mocks base method.
func (m *MockStateDb) AddAddressToAccessList(addr common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAddressToAccessList", addr)
}

// AddAddressToAccessList indicates an expected call of AddAddressToAccessList.
func (mr *MockStateDbMockRecorder) AddAddressToAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddressToAccessList", reflect.TypeOf((*MockStateDb)(nil).AddAddressToAccessList), addr)
}

// AddBalance mocks base method.
func (m *MockStateDb) AddBalance(arg0 common.Address, arg1 *uint256.Int, arg2 tracing.BalanceChangeReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBalance", arg0, arg1, arg2)
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockStateDbMockRecorder) AddBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockStateDb)(nil).AddBalance), arg0, arg1, arg2)
}

// AddLog mocks base method.
func (m *MockStateDb) AddLog(arg0 *types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLog", arg0)
}

// AddLog indicates an expected call of AddLog.
func (mr *MockStateDbMockRecorder) AddLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLog", reflect.TypeOf((*MockStateDb)(nil).AddLog), arg0)
}

// AddPreimage mocks base method.
func (m *MockStateDb) AddPreimage(arg0 common.Hash, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPreimage", arg0, arg1)
}

// AddPreimage indicates an expected call of AddPreimage.
func (mr *MockStateDbMockRecorder) AddPreimage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPreimage", reflect.TypeOf((*MockStateDb)(nil).AddPreimage), arg0, arg1)
}

// AddRefund mocks base method.
func (m *MockStateDb) AddRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRefund", arg0)
}

// AddRefund indicates an expected call of AddRefund.
func (mr *MockStateDbMockRecorder) AddRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRefund", reflect.TypeOf((*MockStateDb)(nil).AddRefund), arg0)
}

// AddSlotToAccessList mocks base method.
func (m *MockStateDb) AddSlotToAccessList(addr common.Address, slot common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSlotToAccessList", addr, slot)
}

// AddSlotToAccessList indicates an expected call of AddSlotToAccessList.
func (mr *MockStateDbMockRecorder) AddSlotToAccessList(addr, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlotToAccessList", reflect.TypeOf((*MockStateDb)(nil).AddSlotToAccessList), addr, slot)
}

// AddressInAccessList mocks base method.
func (m *MockStateDb) AddressInAccessList(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressInAccessList indicates an expected call of AddressInAccessList.
func (mr *MockStateDbMockRecorder) AddressInAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressInAccessList", reflect.TypeOf((*MockStateDb)(nil).AddressInAccessList), addr)
}

// CreateAccount mocks base method.
func (m *MockStateDb) CreateAccount(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAccount", arg0)
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStateDbMockRecorder) CreateAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStateDb)(nil).CreateAccount), arg0)
}

// CreateContract mocks base method.
func (m *MockStateDb) CreateContract(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateContract", arg0)
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockStateDbMockRecorder) CreateContract(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockStateDb)(nil).CreateContract), arg0)
}

// Empty mocks base method.
func (m *MockStateDb) Empty(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Empty indicates an expected call of Empty.
func (mr *MockStateDbMockRecorder) Empty(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockStateDb)(nil).Empty), arg0)
}

// Exist mocks base method.
func (m *MockStateDb) Exist(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockStateDbMockRecorder) Exist(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockStateDb)(nil).Exist), arg0)
}

// GetBalance mocks base method.
func (m *MockStateDb) GetBalance(arg0 common.Address) *uint256.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(*uint256.Int)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateDbMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateDb)(nil).GetBalance), arg0)
}

// GetCode mocks base method.
func (m *MockStateDb) GetCode(arg0 common.Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateDbMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockStateDb)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockStateDb) GetCodeHash(arg0 common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockStateDbMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockStateDb)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockStateDb) GetCodeSize(arg0 common.Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockStateDbMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockStateDb)(nil).GetCodeSize), arg0)
}

// GetCommittedState mocks base method.
func (m *MockStateDb) GetCommittedState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetCommittedState indicates an expected call of GetCommittedState.
func (mr *MockStateDbMockRecorder) GetCommittedState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedState", reflect.TypeOf((*MockStateDb)(nil).GetCommittedState), arg0, arg1)
}

// GetNonce mocks base method.
func (m *MockStateDb) GetNonce(arg0 common.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateDbMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockStateDb)(nil).GetNonce), arg0)
}

// GetRefund mocks base method.
func (m *MockStateDb) GetRefund() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefund")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRefund indicates an expected call of GetRefund.
func (mr *MockStateDbMockRecorder) GetRefund() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefund", reflect.TypeOf((*MockStateDb)(nil).GetRefund))
}

// GetState mocks base method.
func (m *MockStateDb) GetState(arg0 common.Address, arg1 common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockStateDbMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateDb)(nil).GetState), arg0, arg1)
}

// GetStorageRoot mocks base method.
func (m *MockStateDb) GetStorageRoot(addr common.Address) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageRoot", addr)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetStorageRoot indicates an expected call of GetStorageRoot.
func (mr *MockStateDbMockRecorder) GetStorageRoot(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageRoot", reflect.TypeOf((*MockStateDb)(nil).GetStorageRoot), addr)
}

// GetTransientState mocks base method.
func (m *MockStateDb) GetTransientState(addr common.Address, key common.Hash) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientState", addr, key)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// GetTransientState indicates an expected call of GetTransientState.
func (mr *MockStateDbMockRecorder) GetTransientState(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientState", reflect.TypeOf((*MockStateDb)(nil).GetTransientState), addr, key)
}

// HasSelfDestructed mocks base method.
func (m *MockStateDb) HasSelfDestructed(arg0 common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockStateDbMockRecorder) HasSelfDestructed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockStateDb)(nil).HasSelfDestructed), arg0)
}

// PointCache mocks base method.
func (m *MockStateDb) PointCache() *utils.PointCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PointCache")
	ret0, _ := ret[0].(*utils.PointCache)
	return ret0
}

// PointCache indicates an expected call of PointCache.
func (mr *MockStateDbMockRecorder) PointCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PointCache", reflect.TypeOf((*MockStateDb)(nil).PointCache))
}

// Prepare mocks base method.
func (m *MockStateDb) Prepare(rules params.Rules, sender, coinbase common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Prepare", rules, sender, coinbase, dest, precompiles, txAccesses)
}

// Prepare indicates an expected call of Prepare.
func (mr *MockStateDbMockRecorder) Prepare(rules, sender, coinbase, dest, precompiles, txAccesses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockStateDb)(nil).Prepare), rules, sender, coinbase, dest, precompiles, txAccesses)
}

// RevertToSnapshot mocks base method.
func (m *MockStateDb) RevertToSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RevertToSnapshot", arg0)
}

// RevertToSnapshot indicates an expected call of RevertToSnapshot.
func (mr *MockStateDbMockRecorder) RevertToSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot", reflect.TypeOf((*MockStateDb)(nil).RevertToSnapshot), arg0)
}

// SelfDestruct mocks base method.
func (m *MockStateDb) SelfDestruct(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SelfDestruct", arg0)
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockStateDbMockRecorder) SelfDestruct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockStateDb)(nil).SelfDestruct), arg0)
}

// Selfdestruct6780 mocks base method.
func (m *MockStateDb) Selfdestruct6780(arg0 common.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Selfdestruct6780", arg0)
}

// Selfdestruct6780 indicates an expected call of Selfdestruct6780.
func (mr *MockStateDbMockRecorder) Selfdestruct6780(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Selfdestruct6780", reflect.TypeOf((*MockStateDb)(nil).Selfdestruct6780), arg0)
}

// SetCode mocks base method.
func (m *MockStateDb) SetCode(arg0 common.Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockStateDbMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockStateDb)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockStateDb) SetNonce(arg0 common.Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockStateDbMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockStateDb)(nil).SetNonce), arg0, arg1)
}

// SetState mocks base method.
func (m *MockStateDb) SetState(arg0 common.Address, arg1, arg2 common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1, arg2)
}

// SetState indicates an expected call of SetState.
func (mr *MockStateDbMockRecorder) SetState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockStateDb)(nil).SetState), arg0, arg1, arg2)
}

// SetTransientState mocks base method.
func (m *MockStateDb) SetTransientState(addr common.Address, key, value common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientState", addr, key, value)
}

// SetTransientState indicates an expected call of SetTransientState.
func (mr *MockStateDbMockRecorder) SetTransientState(addr, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientState", reflect.TypeOf((*MockStateDb)(nil).SetTransientState), addr, key, value)
}

// SlotInAccessList mocks base method.
func (m *MockStateDb) SlotInAccessList(addr common.Address, slot common.Hash) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlotInAccessList", addr, slot)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SlotInAccessList indicates an expected call of SlotInAccessList.
func (mr *MockStateDbMockRecorder) SlotInAccessList(addr, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlotInAccessList", reflect.TypeOf((*MockStateDb)(nil).SlotInAccessList), addr, slot)
}

// Snapshot mocks base method.
func (m *MockStateDb) Snapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockStateDbMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockStateDb)(nil).Snapshot))
}

// SubBalance mocks base method.
func (m *MockStateDb) SubBalance(arg0 common.Address, arg1 *uint256.Int, arg2 tracing.BalanceChangeReason) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubBalance", arg0, arg1, arg2)
}

// SubBalance indicates an expected call of SubBalance.
func (mr *MockStateDbMockRecorder) SubBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubBalance", reflect.TypeOf((*MockStateDb)(nil).SubBalance), arg0, arg1, arg2)
}

// SubRefund mocks base method.
func (m *MockStateDb) SubRefund(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubRefund", arg0)
}

// SubRefund indicates an expected call of SubRefund.
func (mr *MockStateDbMockRecorder) SubRefund(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubRefund", reflect.TypeOf((*MockStateDb)(nil).SubRefund), arg0)
}

// Witness mocks base method.
func (m *MockStateDb) Witness() *stateless.Witness {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Witness")
	ret0, _ := ret[0].(*stateless.Witness)
	return ret0
}

// Witness indicates an expected call of Witness.
func (mr *MockStateDbMockRecorder) Witness() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Witness", reflect.TypeOf((*MockStateDb)(nil).Witness))
}
