//
// Copyright (c) 2024 Fantom Foundation
//
// Use of this software is governed by the Business Source License included
// in the LICENSE file and at fantom.foundation/bsl11.
//
// Change Date: 2028-4-16
//
// On the date above, in accordance with the Business Source License, use
// of this software will be governed by the GNU Lesser General Public Licence v3
//

// Code generated by MockGen. DO NOT EDIT.
// Source: processor.go
//
// Generated by this command:
//
//	mockgen -source processor.go -destination processor_mock.go -package vm
//

// Package vm is a generated GoMock package.
package vm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockProcessor) Run(arg0 Revision, arg1 Transaction, arg2 BlockInfo, arg3 State) (Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockProcessorMockRecorder) Run(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProcessor)(nil).Run), arg0, arg1, arg2, arg3)
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AccessAccount mocks base method.
func (m *MockState) AccessAccount(addr Address) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessAccount", addr)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessAccount indicates an expected call of AccessAccount.
func (mr *MockStateMockRecorder) AccessAccount(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessAccount", reflect.TypeOf((*MockState)(nil).AccessAccount), addr)
}

// AccessStorage mocks base method.
func (m *MockState) AccessStorage(addr Address, key Key) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessStorage", addr, key)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessStorage indicates an expected call of AccessStorage.
func (mr *MockStateMockRecorder) AccessStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessStorage", reflect.TypeOf((*MockState)(nil).AccessStorage), addr, key)
}

// AccountExists mocks base method.
func (m *MockState) AccountExists(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountExists", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AccountExists indicates an expected call of AccountExists.
func (mr *MockStateMockRecorder) AccountExists(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountExists", reflect.TypeOf((*MockState)(nil).AccountExists), addr)
}

// Call mocks base method.
func (m *MockState) Call(kind CallKind, parameter CallParameter) (CallResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", kind, parameter)
	ret0, _ := ret[0].(CallResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockStateMockRecorder) Call(kind, parameter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockState)(nil).Call), kind, parameter)
}

// CreateSnapshot mocks base method.
func (m *MockState) CreateSnapshot() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot")
	ret0, _ := ret[0].(int)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockStateMockRecorder) CreateSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockState)(nil).CreateSnapshot))
}

// EmitLog mocks base method.
func (m *MockState) EmitLog(addr Address, topics []Hash, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitLog", addr, topics, data)
}

// EmitLog indicates an expected call of EmitLog.
func (mr *MockStateMockRecorder) EmitLog(addr, topics, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitLog", reflect.TypeOf((*MockState)(nil).EmitLog), addr, topics, data)
}

// GetBalance mocks base method.
func (m *MockState) GetBalance(addr Address) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", addr)
	ret0, _ := ret[0].(Value)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateMockRecorder) GetBalance(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockState)(nil).GetBalance), addr)
}

// GetBlockHash mocks base method.
func (m *MockState) GetBlockHash(number int64) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", number)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockStateMockRecorder) GetBlockHash(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockState)(nil).GetBlockHash), number)
}

// GetCode mocks base method.
func (m *MockState) GetCode(addr Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", addr)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockStateMockRecorder) GetCode(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockState)(nil).GetCode), addr)
}

// GetCodeHash mocks base method.
func (m *MockState) GetCodeHash(addr Address) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", addr)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockStateMockRecorder) GetCodeHash(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockState)(nil).GetCodeHash), addr)
}

// GetCodeSize mocks base method.
func (m *MockState) GetCodeSize(addr Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", addr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockStateMockRecorder) GetCodeSize(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockState)(nil).GetCodeSize), addr)
}

// GetCommittedStorage mocks base method.
func (m *MockState) GetCommittedStorage(addr Address, key Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedStorage", addr, key)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetCommittedStorage indicates an expected call of GetCommittedStorage.
func (mr *MockStateMockRecorder) GetCommittedStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedStorage", reflect.TypeOf((*MockState)(nil).GetCommittedStorage), addr, key)
}

// GetNonce mocks base method.
func (m *MockState) GetNonce(arg0 Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockState)(nil).GetNonce), arg0)
}

// GetStorage mocks base method.
func (m *MockState) GetStorage(addr Address, key Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", addr, key)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockStateMockRecorder) GetStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockState)(nil).GetStorage), addr, key)
}

// GetTransactionContext mocks base method.
func (m *MockState) GetTransactionContext() TransactionContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionContext")
	ret0, _ := ret[0].(TransactionContext)
	return ret0
}

// GetTransactionContext indicates an expected call of GetTransactionContext.
func (mr *MockStateMockRecorder) GetTransactionContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionContext", reflect.TypeOf((*MockState)(nil).GetTransactionContext))
}

// GetTransientStorage mocks base method.
func (m *MockState) GetTransientStorage(addr Address, key Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientStorage", addr, key)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetTransientStorage indicates an expected call of GetTransientStorage.
func (mr *MockStateMockRecorder) GetTransientStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientStorage", reflect.TypeOf((*MockState)(nil).GetTransientStorage), addr, key)
}

// HasSelfDestructed mocks base method.
func (m *MockState) HasSelfDestructed(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockStateMockRecorder) HasSelfDestructed(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockState)(nil).HasSelfDestructed), addr)
}

// IsAddressInAccessList mocks base method.
func (m *MockState) IsAddressInAccessList(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressInAccessList indicates an expected call of IsAddressInAccessList.
func (mr *MockStateMockRecorder) IsAddressInAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressInAccessList", reflect.TypeOf((*MockState)(nil).IsAddressInAccessList), addr)
}

// IsSlotInAccessList mocks base method.
func (m *MockState) IsSlotInAccessList(addr Address, key Key) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotInAccessList", addr, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsSlotInAccessList indicates an expected call of IsSlotInAccessList.
func (mr *MockStateMockRecorder) IsSlotInAccessList(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotInAccessList", reflect.TypeOf((*MockState)(nil).IsSlotInAccessList), addr, key)
}

// RestoreSnapshot mocks base method.
func (m *MockState) RestoreSnapshot(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestoreSnapshot", arg0)
}

// RestoreSnapshot indicates an expected call of RestoreSnapshot.
func (mr *MockStateMockRecorder) RestoreSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshot", reflect.TypeOf((*MockState)(nil).RestoreSnapshot), arg0)
}

// SelfDestruct mocks base method.
func (m *MockState) SelfDestruct(addr, beneficiary Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", addr, beneficiary)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockStateMockRecorder) SelfDestruct(addr, beneficiary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockState)(nil).SelfDestruct), addr, beneficiary)
}

// SetBalance mocks base method.
func (m *MockState) SetBalance(arg0 Address, arg1 Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockStateMockRecorder) SetBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockState)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockState) SetCode(arg0 Address, arg1 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockStateMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockState)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockState) SetNonce(arg0 Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockStateMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockState)(nil).SetNonce), arg0, arg1)
}

// SetStorage mocks base method.
func (m *MockState) SetStorage(addr Address, key Key, value Word) StorageStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorage", addr, key, value)
	ret0, _ := ret[0].(StorageStatus)
	return ret0
}

// SetStorage indicates an expected call of SetStorage.
func (mr *MockStateMockRecorder) SetStorage(addr, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorage", reflect.TypeOf((*MockState)(nil).SetStorage), addr, key, value)
}

// SetTransientStorage mocks base method.
func (m *MockState) SetTransientStorage(addr Address, key Key, value Word) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientStorage", addr, key, value)
}

// SetTransientStorage indicates an expected call of SetTransientStorage.
func (mr *MockStateMockRecorder) SetTransientStorage(addr, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientStorage", reflect.TypeOf((*MockState)(nil).SetTransientStorage), addr, key, value)
}
