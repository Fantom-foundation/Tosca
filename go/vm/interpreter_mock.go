// Code generated by MockGen. DO NOT EDIT.
// Source: interpreter.go
//
// Generated by this command:
//
//	mockgen -source interpreter.go -destination interpreter_mock.go -package vm
//

// Package vm is a generated GoMock package.
package vm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterpreter is a mock of Interpreter interface.
type MockInterpreter struct {
	ctrl     *gomock.Controller
	recorder *MockInterpreterMockRecorder
}

// MockInterpreterMockRecorder is the mock recorder for MockInterpreter.
type MockInterpreterMockRecorder struct {
	mock *MockInterpreter
}

// NewMockInterpreter creates a new mock instance.
func NewMockInterpreter(ctrl *gomock.Controller) *MockInterpreter {
	mock := &MockInterpreter{ctrl: ctrl}
	mock.recorder = &MockInterpreterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterpreter) EXPECT() *MockInterpreterMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockInterpreter) Run(arg0 Parameters) (Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockInterpreterMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInterpreter)(nil).Run), arg0)
}

// MockRunContext is a mock of RunContext interface.
type MockRunContext struct {
	ctrl     *gomock.Controller
	recorder *MockRunContextMockRecorder
}

// MockRunContextMockRecorder is the mock recorder for MockRunContext.
type MockRunContextMockRecorder struct {
	mock *MockRunContext
}

// NewMockRunContext creates a new mock instance.
func NewMockRunContext(ctrl *gomock.Controller) *MockRunContext {
	mock := &MockRunContext{ctrl: ctrl}
	mock.recorder = &MockRunContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunContext) EXPECT() *MockRunContextMockRecorder {
	return m.recorder
}

// AccessAccount mocks base method.
func (m *MockRunContext) AccessAccount(addr Address) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessAccount", addr)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessAccount indicates an expected call of AccessAccount.
func (mr *MockRunContextMockRecorder) AccessAccount(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessAccount", reflect.TypeOf((*MockRunContext)(nil).AccessAccount), addr)
}

// AccessStorage mocks base method.
func (m *MockRunContext) AccessStorage(addr Address, key Key) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessStorage", addr, key)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessStorage indicates an expected call of AccessStorage.
func (mr *MockRunContextMockRecorder) AccessStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessStorage", reflect.TypeOf((*MockRunContext)(nil).AccessStorage), addr, key)
}

// AccountExists mocks base method.
func (m *MockRunContext) AccountExists(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountExists", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AccountExists indicates an expected call of AccountExists.
func (mr *MockRunContextMockRecorder) AccountExists(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountExists", reflect.TypeOf((*MockRunContext)(nil).AccountExists), addr)
}

// Call mocks base method.
func (m *MockRunContext) Call(kind CallKind, parameter CallParameter) (CallResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", kind, parameter)
	ret0, _ := ret[0].(CallResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockRunContextMockRecorder) Call(kind, parameter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRunContext)(nil).Call), kind, parameter)
}

// EmitLog mocks base method.
func (m *MockRunContext) EmitLog(addr Address, topics []Hash, data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitLog", addr, topics, data)
}

// EmitLog indicates an expected call of EmitLog.
func (mr *MockRunContextMockRecorder) EmitLog(addr, topics, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitLog", reflect.TypeOf((*MockRunContext)(nil).EmitLog), addr, topics, data)
}

// GetBalance mocks base method.
func (m *MockRunContext) GetBalance(addr Address) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", addr)
	ret0, _ := ret[0].(Value)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockRunContextMockRecorder) GetBalance(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockRunContext)(nil).GetBalance), addr)
}

// GetBlockHash mocks base method.
func (m *MockRunContext) GetBlockHash(number int64) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", number)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockRunContextMockRecorder) GetBlockHash(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockRunContext)(nil).GetBlockHash), number)
}

// GetCode mocks base method.
func (m *MockRunContext) GetCode(addr Address) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", addr)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockRunContextMockRecorder) GetCode(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockRunContext)(nil).GetCode), addr)
}

// GetCodeHash mocks base method.
func (m *MockRunContext) GetCodeHash(addr Address) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", addr)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockRunContextMockRecorder) GetCodeHash(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockRunContext)(nil).GetCodeHash), addr)
}

// GetCodeSize mocks base method.
func (m *MockRunContext) GetCodeSize(addr Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", addr)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockRunContextMockRecorder) GetCodeSize(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockRunContext)(nil).GetCodeSize), addr)
}

// GetCommittedStorage mocks base method.
func (m *MockRunContext) GetCommittedStorage(addr Address, key Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedStorage", addr, key)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetCommittedStorage indicates an expected call of GetCommittedStorage.
func (mr *MockRunContextMockRecorder) GetCommittedStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedStorage", reflect.TypeOf((*MockRunContext)(nil).GetCommittedStorage), addr, key)
}

// GetStorage mocks base method.
func (m *MockRunContext) GetStorage(addr Address, key Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", addr, key)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockRunContextMockRecorder) GetStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockRunContext)(nil).GetStorage), addr, key)
}

// GetTransactionContext mocks base method.
func (m *MockRunContext) GetTransactionContext() TransactionContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionContext")
	ret0, _ := ret[0].(TransactionContext)
	return ret0
}

// GetTransactionContext indicates an expected call of GetTransactionContext.
func (mr *MockRunContextMockRecorder) GetTransactionContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionContext", reflect.TypeOf((*MockRunContext)(nil).GetTransactionContext))
}

// HasSelfDestructed mocks base method.
func (m *MockRunContext) HasSelfDestructed(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockRunContextMockRecorder) HasSelfDestructed(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockRunContext)(nil).HasSelfDestructed), addr)
}

// IsAddressInAccessList mocks base method.
func (m *MockRunContext) IsAddressInAccessList(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressInAccessList indicates an expected call of IsAddressInAccessList.
func (mr *MockRunContextMockRecorder) IsAddressInAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressInAccessList", reflect.TypeOf((*MockRunContext)(nil).IsAddressInAccessList), addr)
}

// IsSlotInAccessList mocks base method.
func (m *MockRunContext) IsSlotInAccessList(addr Address, key Key) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotInAccessList", addr, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsSlotInAccessList indicates an expected call of IsSlotInAccessList.
func (mr *MockRunContextMockRecorder) IsSlotInAccessList(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotInAccessList", reflect.TypeOf((*MockRunContext)(nil).IsSlotInAccessList), addr, key)
}

// SelfDestruct mocks base method.
func (m *MockRunContext) SelfDestruct(addr, beneficiary Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", addr, beneficiary)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockRunContextMockRecorder) SelfDestruct(addr, beneficiary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockRunContext)(nil).SelfDestruct), addr, beneficiary)
}

// SetStorage mocks base method.
func (m *MockRunContext) SetStorage(addr Address, key Key, value Word) StorageStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorage", addr, key, value)
	ret0, _ := ret[0].(StorageStatus)
	return ret0
}

// SetStorage indicates an expected call of SetStorage.
func (mr *MockRunContextMockRecorder) SetStorage(addr, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorage", reflect.TypeOf((*MockRunContext)(nil).SetStorage), addr, key, value)
}

// MockProfilingInterpreter is a mock of ProfilingInterpreter interface.
type MockProfilingInterpreter struct {
	ctrl     *gomock.Controller
	recorder *MockProfilingInterpreterMockRecorder
}

// MockProfilingInterpreterMockRecorder is the mock recorder for MockProfilingInterpreter.
type MockProfilingInterpreterMockRecorder struct {
	mock *MockProfilingInterpreter
}

// NewMockProfilingInterpreter creates a new mock instance.
func NewMockProfilingInterpreter(ctrl *gomock.Controller) *MockProfilingInterpreter {
	mock := &MockProfilingInterpreter{ctrl: ctrl}
	mock.recorder = &MockProfilingInterpreterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfilingInterpreter) EXPECT() *MockProfilingInterpreterMockRecorder {
	return m.recorder
}

// DumpProfile mocks base method.
func (m *MockProfilingInterpreter) DumpProfile() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DumpProfile")
}

// DumpProfile indicates an expected call of DumpProfile.
func (mr *MockProfilingInterpreterMockRecorder) DumpProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpProfile", reflect.TypeOf((*MockProfilingInterpreter)(nil).DumpProfile))
}

// ResetProfile mocks base method.
func (m *MockProfilingInterpreter) ResetProfile() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetProfile")
}

// ResetProfile indicates an expected call of ResetProfile.
func (mr *MockProfilingInterpreterMockRecorder) ResetProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetProfile", reflect.TypeOf((*MockProfilingInterpreter)(nil).ResetProfile))
}

// Run mocks base method.
func (m *MockProfilingInterpreter) Run(arg0 Parameters) (Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockProfilingInterpreterMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProfilingInterpreter)(nil).Run), arg0)
}
