// Copyright (c) 2024 Fantom Foundation
//
// Use of this software is governed by the Business Source License included
// in the LICENSE file and at fantom.foundation/bsl11.
//
// Change Date: 2028-4-16
//
// On the date above, in accordance with the Business Source License, use of
// this software will be governed by the GNU Lesser General Public License v3.

package lfvm

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/Fantom-foundation/Tosca/go/tosca"
)

func TestHashCache_hash(t *testing.T) {

	tests := map[string]struct {
		data []byte
		want tosca.Hash
	}{
		"new data": {
			[]byte{1},
			tosca.Hash{0x5f, 0xe7, 0xf9, 0x77, 0xe7, 0x1d, 0xba, 0x2e, 0xa1, 0xa6,
				0x8e, 0x21, 0x05, 0x7b, 0xee, 0xbb, 0x9b, 0xe2, 0xac, 0x30, 0xc6,
				0x41, 0x0a, 0xa3, 0x8d, 0x4f, 0x3f, 0xbe, 0x41, 0xdc, 0xff, 0xd2}},
		"32 bytes": {
			[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
				0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
				0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f},
			tosca.Hash{0x8a, 0xe1, 0xaa, 0x59, 0x7f, 0xa1, 0x46, 0xeb, 0xd3, 0xaa,
				0x2c, 0xed, 0xdf, 0x36, 0x06, 0x68, 0xde, 0xa5, 0xe5, 0x26, 0x56,
				0x7e, 0x92, 0xb0, 0x32, 0x18, 0x16, 0xa4, 0xe8, 0x95, 0xbd, 0x2d}},
		"64 bytes": {
			[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
				0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
				0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
				0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
				0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f},
			tosca.Hash{0x0, 0x20, 0x30, 0xbd, 0xe3, 0xd4, 0xcf, 0x89, 0x91, 0x96,
				0x49, 0x77, 0x5c, 0xd7, 0x18, 0x75, 0xc4, 0xd0, 0xab, 0x17, 0x08,
				0xa3, 0x80, 0xe0, 0x3f, 0xef, 0xc3, 0xa2, 0x8a, 0xa2, 0x48, 0x31}},
	}

	code := Code{Instruction{STOP, 0x0000}}

	for _, test := range tests {
		t.Run(fmt.Sprintf("hash(%v)", test.data), func(t *testing.T) {
			cache := newHashCache(1<<16, 1<<18)
			ctxt := &context{
				code:  code,
				stack: NewStack(),
			}
			hash := cache.hash(ctxt, test.data)
			if hash != test.want {
				t.Fatalf("hash(%v) = %x, want %x", test.data, hash, test.want)
			}
		})

	}
}

func TestHashCache_getHash32CachedEntry(t *testing.T) {
	cache := newHashCache(1<<16, 1<<18)
	ctxt := &context{
		code:  Code{Instruction{STOP, 0x0000}},
		stack: NewStack(),
	}
	data1 := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
		0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
		0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}
	data2 := bytes.Clone(data1)
	data2[31] = 0x01
	data3 := bytes.Clone(data1)
	data3[31] = 0x02
	hash1 := cache.hash(ctxt, data1)
	hash2 := cache.hash(ctxt, data2)
	hash3 := cache.hash(ctxt, data3)
	entry1 := cache.hash(ctxt, data1)
	if entry1 != hash1 {
		t.Fatalf("second cal for same data should return same hash. want %v but got %v", hash1, entry1)
	}
	entry3 := cache.hash(ctxt, data3)
	if entry3 != hash3 {
		t.Fatalf("second cal for same data should return same hash. want %v but got %v", hash3, entry3)
	}
	entry2 := cache.hash(ctxt, data2)
	if entry2 != hash2 {
		t.Fatalf("second cal for same data should return same hash. want %v but got %v", hash2, entry2)
	}
}

func TestHashCache_getHash64CachedEntry(t *testing.T) {
	cache := newHashCache(1<<16, 1<<18)
	ctxt := &context{
		code:  Code{Instruction{STOP, 0x0000}},
		stack: NewStack(),
	}
	data1 := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
		0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
		0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
		0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
		0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	}
	data2 := bytes.Clone(data1)
	data2[63] = 0x01
	data3 := bytes.Clone(data1)
	hash1 := cache.hash(ctxt, data1)
	hash2 := cache.hash(ctxt, data2)
	hash3 := cache.hash(ctxt, data3)
	entry1 := cache.hash(ctxt, data1)
	if entry1 != hash1 {
		t.Fatalf("second cal for same data should return same hash. want %v but got %v", hash1, entry1)
	}
	entry3 := cache.hash(ctxt, data3)
	if entry3 != hash3 {
		t.Fatalf("second cal for same data should return same hash. want %v but got %v", hash3, entry3)
	}
	entry2 := cache.hash(ctxt, data2)
	if entry2 != hash2 {
		t.Fatalf("second cal for same data should return same hash. want %v but got %v", hash2, entry2)
	}
}

func TestHashCache_useCacheTail32(t *testing.T) {
	cache := newHashCache(1<<16, 1<<18)
	ctxt := &context{
		code:  Code{Instruction{STOP, 0x0000}},
		stack: NewStack(),
	}
	data1 := [32]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
		0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
		0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f}
	data2 := data1
	data2[31] = 0x01
	data3 := data1
	data3[31] = 0x02
	cache.nextFree32 = len(cache.entries32) - 1
	// add data1 in the last entry
	_ = cache.hash(ctxt, data1[:])
	// move data1 to tail
	_ = cache.hash(ctxt, data2[:])
	// move data2 to tail
	_ = cache.hash(ctxt, data3[:])
	if _, exists := cache.index32[data1]; exists {
		t.Fatalf("cache tail should have been updated")
	}
}

func TestHashCache_useCacheTail64(t *testing.T) {
	cache := newHashCache(1<<16, 1<<18)
	ctxt := &context{
		code:  Code{Instruction{STOP, 0x0000}},
		stack: NewStack(),
	}
	data1 := [64]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
		0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
		0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
		0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
		0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	}
	data2 := data1
	data2[63] = 0x01
	data3 := data1
	data3[63] = 0x02
	cache.nextFree64 = len(cache.entries64) - 1
	// add data1 in the last entry
	_ = cache.hash(ctxt, data1[:])
	// move data1 to tail
	_ = cache.hash(ctxt, data2[:])
	// move data2 to tail
	_ = cache.hash(ctxt, data3[:])
	if _, exists := cache.index64[data1]; exists {
		t.Fatalf("cache tail should have been updated")
	}
}
